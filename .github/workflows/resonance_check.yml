name: Resonance Check CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10 # Overall job timeout
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4] # Max 4 shards for nightly runs

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest jsonschema
        pip install -e .

    - name: Run pytest
      run: PYTHONPATH=. pytest

    - name: Validate Schema
      run: PYTHONPATH=. python -m metrics.resonance_metric --validate-schema-only

    - name: Run Resonance Metric and Check Threshold
      id: resonance_check
      env:
        RESONANCE_PERMUTATIONS: ${{ github.event_name == 'pull_request' && github.event.pull_request.changed_files_count <= 50 && 100 || 0 }} # Budget cap
        # Add other environment controls for limits here if needed
      run: |
        LOG_FILE="ci_resonance_log.txt"
        MAX_LOG_SIZE=1048576 # 1 MB

        # Run resonance metric with fixed seed and capture verbose output to log file
        PYTHONPATH=. python -m metrics.resonance_metric --input samples/ --output-json ci_resonance.json --verbose --seed 42 > $LOG_FILE 2>&1

        # Log rotation: limit ci_resonance_log.txt to 1 MB; if exceeded, rotate and append notice '[log truncated]'
        if [ -f "$LOG_FILE" ] && [ $(stat -c %s "$LOG_FILE") -gt $MAX_LOG_SIZE ]; then
          mv "$LOG_FILE" "${LOG_FILE}.full"
          echo "[log truncated]" > "$LOG_FILE"
          cat "${LOG_FILE}.full" >> "$LOG_FILE"
          rm "${LOG_FILE}.full"
        fi

        # Extract the overall resonance score and other metrics from the JSON output
        OVERALL_RESONANCE=$(python -c "import json; print(json.load(open('ci_resonance.json'))['overall']['score'])")
        THRESHOLD=$(python -c "import json; print(json.load(open('ci_resonance.json'))['overall']['threshold_used'])")
        RESONANCE_ECHO=$(python -c "import json; print(json.load(open('ci_resonance.json'))['overall']['resonance_echo'])")

        echo "Overall Resonance Score: $OVERALL_RESONANCE"
        echo "Using Threshold: $THRESHOLD"
        echo "Resonance Echo: $RESONANCE_ECHO"

        # Check if the overall resonance is below the threshold
        if (( $(echo "$OVERALL_RESONANCE < $THRESHOLD" | bc -l) )); then
          echo "Resonance check failed!"
          echo "::error ::Resonance check failed. Please check the code consistency."
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "overall_resonance_score=$OVERALL_RESONANCE" >> $GITHUB_OUTPUT
          echo "threshold=$THRESHOLD" >> $GITHUB_OUTPUT
          echo "resonance_echo=$RESONANCE_ECHO" >> $GITHUB_OUTPUT
        else
          echo "Resonance check passed."
          echo "status=success" >> $GITHUB_OUTPUT
          echo "overall_resonance_score=$OVERALL_RESONANCE" >> $GITHUB_OUTPUT
          echo "threshold=$THRESHOLD" >> $GITHUB_OUTPUT
          echo "resonance_echo=$RESONANCE_EJECT" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Upload Resonance Check Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: resonance-check-results-${{ matrix.shard }}
        path: |
          ci_resonance.json
          ci_resonance_log.txt

    - name: Post PR Comment on Failure
      if: steps.resonance_check.outputs.status == 'failure' && github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `### Resonance Check Failed!\n\nYour code\'s resonance score is below the calibrated threshold.\n\n**Overall Resonance:** ${{ steps.resonance_check.outputs.overall_resonance_score }}\n**Threshold:** ${{ steps.resonance_check.outputs.threshold }}\n**Resonance Echo:**\n```\n${{ steps.resonance_check.outputs.resonance_echo }}\n```\n\nFor more details, please check the [Resonance Check Results artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/resonance-check-results-${{ matrix.shard }}).`
          })


